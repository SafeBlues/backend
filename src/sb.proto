syntax = "proto3";

package safeblues;

option java_package = "org.safeblues.api";
option java_outer_classname = "SafeBluesProtos";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/timestamp.proto";


service SafeBluesAdmin {
    rpc NewStrand(Strand) returns (Strand) {
        option (google.api.http) = {
            post: "/admin/new"
            body: "*"
        };
    }

    rpc ListStrands(Empty) returns (StrandUpdate) {
        option (google.api.http) = {
            get: "/admin/list"
        };
    }

    rpc SetSD(StrandSocialDistancing) returns (StrandSocialDistancing) {
        option (google.api.http) = {
            post: "/admin/sd/{strand_id}"
            body: "*"
        };
    }
}

service SafeBlues {
    rpc PingServer(Ping) returns (Ping) {
        option (google.api.http) = {
            get: "/ping/{nonce}"
        };
    }
    rpc Report(InfectionReport) returns (Empty);
    rpc Pull(Empty) returns (StrandUpdate);
    rpc PushDebugData(DebugDataBundle) returns (Empty);
}

service SafeBluesStats {
    rpc AllStats(Empty) returns (AllStatsRes) {
        option (google.api.http) = {
            get: "/stats"
        };
    }

    rpc Stats(StatsReq) returns (StatsRes) {
        option (google.api.http) = {
            get: "/stats/{strand_id}"
        };
    }

    rpc DebugInfo(Empty) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/debug"
        };
    }
}

message Empty {}

message StatsReq {
    uint32 strand_id = 1;
}

message StatsRes {
    uint32 strand_id = 1;

    repeated google.protobuf.Timestamp times = 2;
    repeated uint32 total_incubating_strands = 3;
    repeated uint32 total_infected_strands = 4;
    repeated uint32 total_removed_strands = 5;
}

message AllStatsRes {
    repeated StatsRes stats = 1;
}

message Ping {
    uint32 nonce = 1;
}

message Strand {
    string name = 13;
    int64 strand_id = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
    double seeding_probability = 4;
    // the two parameters of the infection probability map
    double infection_probability_map_p = 5;
    double infection_probability_map_k = 6;
    double infection_probability_map_l = 7;
    // mean and shape of the gamma distribution for incubation period
    double incubation_period_mean_sec = 8;
    double incubation_period_shape = 9;
    // mean and shape of the gamma distribution for infectious period
    double infectious_period_mean_sec = 10;
    double infectious_period_shape = 11;

    uint32 minimum_app_version = 12;
}

message InfectionReport {
    string client_id = 1;
    int32 version_code = 5;

    repeated uint32 current_incubating_strands = 2;
    repeated uint32 current_infected_strands = 3;
    repeated uint32 current_removed_strands = 4;
}

message StrandSocialDistancing {
    int64 strand_id = 1;
    double social_distancing_factor = 2;
}

message StrandUpdate {
    repeated Strand strands = 1;
    // informs the app if there's a new version
    uint32 latest_app_version = 2;

    repeated StrandSocialDistancing sds = 3;
}

message DebugData {
    // debug data: only generated by custom debug builds for internal testing!

    int32 experiment_id = 1;
    // the receiving phone's participant id
    string participant_id = 2;
    // the time at which this data was generated
    google.protobuf.Timestamp now = 3;
    // the time the other phone was first seen
    google.protobuf.Timestamp first_seen = 4;
    // the time the other phone was last seen
    google.protobuf.Timestamp last_seen = 5;
    // list of transaction powers reported by the other phone
    repeated int32 tx_powers = 6;
    // list of received signal strenghts
    repeated int32 rssis = 7;
    // the computed duration of encounter in seconds
    double duration = 8;
    // the computed distance of encounter in meters
    double distance = 9;
    // the temporary (protocol level) id of the other phone
    string temporary_id = 10;
    // the list of strands that the other phone is advertising
    repeated int64 strand_ids = 11;
}

message DebugDataBundle {
    repeated DebugData data = 1;
}
